"use client";

import { useState, useEffect } from 'react';
import { secureDataOperations } from '@/lib/supabase';
import SymptomCard from '@/components/SymptomCard';
import SymptomForm from '@/components/SymptomForm';
import MainLayout from './main-layout';
import { Button } from '@/components/ui/button';
import type { SymptomCard as SymptomCardType } from '@/types/symptom';

export default function Home() {
  const [cards, setCards] = useState<SymptomCardType[]>([]);
  const [showForm, setShowForm] = useState(false);
  const [editingCard, setEditingCard] = useState<SymptomCardType | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadSymptoms();
  }, []);

  const loadSymptoms = async () => {
    try {
      const data = await secureDataOperations.getSymptoms();

      const formattedData: SymptomCardType[] = data.map(symptom => ({
        id: symptom.id,
        symptom: symptom.name,
        childId: symptom.child_id,
        createdAt: symptom.created_at,
        solutions: symptom.solutions?.map(s => ({
          description: s.description,
          effectiveness_rating: s.effectiveness_rating,
          time_to_relief: s.time_to_relief,
          precautions: s.precautions
        })) || [],
        notes: symptom.notes,
      }));

      setCards(formattedData);
    } catch (error: unknown) {
      if (error instanceof Error) {
        setError(error.message);
      } else {
        setError('An unknown error occurred');
      } Error) {
        setError(error.message);
      } else {
        setError('An unknown error occurred');
      } Error) {
        setError(error.message);
      } else {
        setError('An unknown error occurred');
      } Error) {
        setError(error.message);
      } else {
        setError('An unknown error occurred');
      }
    } finally {
      setLoading(false);
    }
  };

  const addCard = async (data: Omit<SymptomCardType, 'id' | 'createdAt'>) => {
    try {
      setError(null);

      await secureDataOperations.insertSymptom({
        name: data.symptom,
        child_id: data.childId,
        solutions: data.solutions,
        notes: data.notes
      });

      loadSymptoms();
      setShowForm(false);
    } catch (error: unknown) {
      if (error instanceof Error) {
        setError(error.message);
      } else {
        setError('An unknown error occurred');
      } Error) {
        setError(error.message);
      } else {
        setError('An unknown error occurred');
      } Error) {
        setError(error.message);
      } else {
        setError('An unknown error occurred');
      } Error) {
        setError(error.message);
      } else {
        setError('An unknown error occurred');
      }
    }
  };

  const updateCard = async (data: Omit<SymptomCardType, 'id' | 'createdAt'>) => {
    if (!editingCard) return;

    try {
      setError(null);

      await secureDataOperations.updateSymptom(editingCard.id, {
        name: data.symptom,
        child_id: data.childId,
        solutions: data.solutions,
        notes: data.notes
      });

      loadSymptoms();
      setEditingCard(null);
      setShowForm(false);
    } catch (error: unknown) {
      if (error instanceof Error) {
        setError(error.message);
      } else {
        setError('An unknown error occurred');
      } Error) {
        setError(error.message);
      } else {
        setError('An unknown error occurred');
      } Error) {
        setError(error.message);
      } else {
        setError('An unknown error occurred');
      } Error) {
        setError(error.message);
      } else {
        setError('An unknown error occurred');
      }
    }
  };

  const deleteCard = async (id: string) => {
    try {
      await secureDataOperations.deleteSymptom(id);
      loadSymptoms();
    } catch (error: unknown) {
      if (error instanceof Error) {
        setError(error.message);
      } else {
        setError('An unknown error occurred');
      } Error) {
        setError(error.message);
      } else {
        setError('An unknown error occurred');
      } Error) {
        setError(error.message);
      } else {
        setError('An unknown error occurred');
      } Error) {
        setError(error.message);
      } else {
        setError('An unknown error occurred');
      }
    }
  };

  const handleEdit = (card: SymptomCardType) => {
    setEditingCard(card);
  };

  return (
    <MainLayout>
      <div className="container mx-auto py-4">
        <h1 className="text-2xl font-bold mb-4 px-4">Symptoms</h1>
        
        {loading ? (
          <div className="p-4">
            <p className="text-gray-600">Loading symptoms...</p>
          </div>
        ) : (
          <div>
            {error && (
              <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4 mx-4">
                {error}
              </div>
            )}

            {showForm ? (
              <SymptomForm
                onSubmit={addCard}
                onCancel={() => setShowForm(false)}
              />
            ) : editingCard ? (
              <SymptomForm
                initialData={editingCard}
                onSubmit={updateCard}
                onCancel={() => setEditingCard(null)}
                submitLabel="Update"
              />
            ) : (
              <div className="px-4 mb-4">
                <Button
                  onClick={() => setShowForm(true)}
                  className="w-full bg-indigo-600 hover:bg-indigo-700"
                >
                  Add New Symptom
                </Button>
              </div>
            )}

            {cards.length === 0 && !showForm && !editingCard ? (
              <div className="text-center p-8 text-gray-500">
                <p>No symptoms added yet. Add your first symptom to get started.</p>
              </div>
            ) : (
              cards.map((card) => (
                <SymptomCard
                  key={card.id}
                  card={card}
                  onDelete={deleteCard}
                  onEdit={handleEdit}
                />
              ))
            )}
          </div>
        )}
      </div>
    </MainLayout>
  );
}
